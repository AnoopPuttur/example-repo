Day 1 -------------------------------------------------------------------
kubectl create -f example1.yaml
 kubectl get pods
 kubectl get po
 kubectl get po -o wide
 kubectl describ pod tomcat-pod
 kubectl describe pod tomcat-pod

12  kubectl create -f example1.yaml
   13  kubectl get po 
   14  kubectl get po -o wide 
   15  ping 192.168.1.4
   16  kubectl exec -it tomcat-pod -- /bin/sh
   17  kubectl delete pod tomcat-pod 
   18  kubectl get po 
   19  history
   
 
   
    4  cat > example2.yaml
    5  kubectl create -f example2.yaml
    6  kubectl get po 
    7  kubectl get po -o wide
    8  kubectl get po -l app=tomcat-app
    9  kubectl describe rc tomcat-rc 
   10  kubectl scale rc tomcat-rc --replicas=7
   11  kubectl get po -o wide
   12  kubectl scale rc tomcat-rc --replicas=2
   13  kubectl get po -o wide
   14  kubectl scale rc tomcat-rc --replicas=4
   15  kubectl get po -o wide
   16  kubectl delete pod tomcat-rc-5bhp7 
   17  kubectl get po -o wide
   18  kubectl delete rc tomcat-rc 
   19  kubectl get po -l app=tomcat-app
   20  kubectl create -f example2.yaml
   21  kubectl get po -l app=tomcat-app
   22  kubetl delete -f example2.yaml
   23  kubectl delete -f example2.yaml



26  kubectl get po
   27  kubectl run tomcat-pod1 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app --dry-run=client
   28  kubectl run tomcat-pod1 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app --dry-run=client -o yaml
   29  kubectl get po
   30  kubectl run tomcat-pod1 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app
   31  kubectl get po
   32  kubectl run tomcat-pod2 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app
   33  kubectl run tomcat-pod3 --image=vishymails/tomcatimage:1.0 --labels=app=tomcat-app
   34  kubectl get po
   35  kubectl get po -o wide -l app=tomcat-app
   36  kubectl get rc 
   37  ls
   38  kubectl create -f example2.yaml
   39  kubectl get po 
   40  kubectl get rc 
   41  kubectl delete pod tomcat-pod1
   42  kubectl get rc 
   43  kubectl get po 
   44  kubectl describe rc tomcat-rc 

12 kubectl create -f example3.yaml
  13 kubectl get rs
  14 kubectl get po
  15 kubectl get po -o wide
  16 kubectl describe rs tomcat-rs
  17 kubectl scale rs tomcat-rs --replicas=6
  18 kubectl get po -o wide
  19 kubectl scale rs tomcat-rs --replicas=2
  20 kubectl get po -o wide
  21 kubectl get po -o wide
  22 kubectl delete rs tomcat-rs
  23 kubectl delete rs tomcat-pod
  24 kubectl delete pod tomcat-pod


   4  cat > example4.yaml
    5  kubectl create -f example4.yaml 
    6  kubectl get deploy 
    7  kubectl get deploy -l app=tomcat-app
    8  kubectl get po 
    9  kubectl get po -o wide 
   10  kubectl get rs 
   11  kubectl describe deploy tomcat-deploy 

Terminal1 ------------------
 14  kubectl get deploy -o wide 
   15  kubectl set image deploy tomcat-deploy tomcat-container=nginx:1.9.1
   16  kubectl set image deploy tomcat-deploy tomcat-containers=nginx:1.9.1
   17  kubectl rollout status deployment/tomcat-deploy 
   18  kubectl get deploy -o wide 
   19  kubectl set image deploy tomcat-deploy tomcat-containers=nginx:1.91 --record
   20  kubectl get deploy -o wide 
   21  kubectl rollout status deployment/tomcat-deploy 
   22  kubectl get deploy -o wide 
   23  kubectl rollout status deployment/tomcat-deploy 
   24  kubectl scale deployment tomcat-deploy --replicas=7
   25  kubectl get deploy -o wide 
   26  kubectl scale deployment tomcat-deploy --replicas=3
   27  kubectl get deploy -o wide 
Terminal 2----------------------------------------
3  kubectl rollout history deployment/tomcat-deploy
    4  kubectl rollout undo deployment/tomcat-deploy


Day2 ----------------------------------
    
    
    Create Alias for kubectl  command:
 alias g=kubectl
Q 01) #Create a new pod called admin-pod with image busybox. Allow it to be able to set system_time. Container should sleep for 3200 seconds.


 4  alias g=kubectl 
    5  g run admin-pod --image=busybox --command sleep 3200 --dry-run=client -o yaml 
  

Create a new deployment called web-proj-268 with image nginx:1.16 and one replica. Next, upgrade the deployment to version 1.17 using rolling update. 
Make sure that the version upgrade is recorded in the resource annotation.


alias g=kubectl
  6  g create deployment web-proj-268 --image=nginx:1.16
    7  g describe deployment web-proj-268
    8  g get deploy
    9  g get po 
   10  g get rs
   11  g set image deployment web-proj-268 nginx=nginx:1.7 --record 
   12  g rollout history deployment web-proj-268



Create a new deployment web-003, scale this deployment to 3 replicas, make sure desired number of pods are always running.

  14  g create deployment web-003 --image=nginx --replicas=3
   15  g get po 


 deploy a web-load-5461 pod using nginx:1.17 with the label set to tier=web
 
 kubectl run tomcat-pod1 --image=nginx:1.17 --labels=tier=web --dry-run=
 
 
 
 
 Create a new deployment called nginx-deployment with an image nginx:1.16 and 5 replicas. There are 2 worker nodes in our cluster. 
#Please make sure no pod will get deployed on node7.
 
 
 
 
 Create static pod on node07 called static-nginx with image nginx and you have to make sure that it is recreated/restarted automatically in case of any failure happens.

5  ps -ef | grep kubelet
    6  sudo grep static /var/lib/kubelet/config.yaml
    7  ls /etc/kubernetes/manifests
    8  alias g=kubectl
    9  g run static-nginx --image=nginx --dry-run=client -o yaml 
   10  g run static-nginx --image=nginx --dry-run=client -o yaml > example9.yaml
   11  g get nodes 
   12  cat example9.yaml | ssh node01 "tee example9.yaml"
   13  clead
   14  clear
   15  g get po 
   16  g get po -o wide 
   17  g delete pod static-nginx-node01
   18  g get po -o wide 
   19  history
   
   
   
   WORKER NODE
   
   4  ps -ef | grep kubelet
    5  sudo grep static /var/lib/kubelet/config.yaml
    6  sudo cp example9.yaml /etc/kubernetes/config.yaml
    7  sudo cp example9.yaml /etc/kubernetes/manifests/.
    8  ls /etc/kubernetes/manifests


services -
     4  cat > example9.yaml
    5  cat > example10.yaml
    6  kubectl create -f example9.yaml
    7  kubectl create -f example10.yaml
    8  kubectl get po 
    9  kubectl get svc 
   10  kubectl describe svc my-service
   11  curl http://192.168.1.4:8080
   12  curl http://192.168.1.5:8080
   13  curl http://192.168.1.6:8080
   14  kubectl describe svc my-service
   15  kubectl get po -o wide
   16  kubectl get node -o wide
   17  curl http://172.30.2.2:8080
   18  curl http://172.30.2.2:31000
   19  history


   Expose "audit-web-app" pod to by creating a service "audit-web-app-service" on port 30002 on nodes of given cluster.


 alias g=kubectl
    5  g run audit-web-app --image=nginx --port=8080
    6  g expose pod audit-web-app --name=audit-web-app-svc --type=NodePort --dry-run=client -o yaml | tee example12.yaml
    7  kubectl get po 
    8  g apply -f example12.yaml
    9  g get pods -o wide 
   10  g describe audit-web-app-svc
   11  g get svc
   12  g describe svc audit-web-app-svc
   
   
   
   
   Create a replicaset (name : web-replica, image=nginx, replicas=3), there is already a pod running in our cluster.  
 Please make sure that total count of pods running in the cluster is not more than 3.
  
  
  
  
  Volumes - 
  
   cat > example13.yaml
   15  kubectl create -f example13.yaml
   16  kubectl exec -it tomcat-pod -- /bin/sh
   17  kubectl get po 
   18  kubectl delete po tomcat-pod
   19  kubectl get po 
   20  kubectl create -f example13.yaml
   21  kubectl exec -it tomcat-pod -- /bin/sh

MultiContainer
9  cat > example16.yaml
   10  kubectl create -f example16.yaml
   11  kubectl get po -o wide
   12  kubectl exec -it multicontainer-pod -- /bin/sh
   13  kubectl exec --container=producer -it multicontainer-pod -- /bin/sh
   14  history

PV/PVC
7  clear
    8  kubectl create -f example19.yaml
    9  kubectl get pv 
   10  kubectl create -f example20.yaml
   11  kubectl get pvc
   12  kubectl get pv 
   13  history


19  kubectl delete pvc kube-pv
   20  kubectl delete pv kube-pv
   21  kubectl create -f example19.yaml
   22  cat > example21.yaml
   23  kubectl create -f example21.yaml
   24  kubectl get pv 
   25  kubectl get pvc
   26  kubectl delete pvc my-disk-claim
   27  kubectl create -f example20.yaml
   28  kubectl get pv 
   29  kubectl get pvc
   30  cat > example22.yaml
   31  kubectl create -f example22.yaml
   32  kubectl get po -o wide 
   33  kubectl exec -it pv-pod -- /bin/bash
   34  history




   
   
   
   
   Create a pod called pod-multi with 2 containers as it is descripted below:
   Container 1 : name:container1, image: nginx 
   Container 2 : name:container2, image: busybox, command: sleep 4800
   
   
   
   
   Create a persistent volume with given specifications:
  Volume Name - pv-rnd
  storage - 100Mi
  Access modes - ReadWriteMany
  host path - /pv/host-data-rnd
 
 
 
 
 Craete a PersistentVolume, PersistentVolumeClaim and Pod with below specifications

  PV - name : mypvl , Size: 100Mi, AccessModes: ReadWritemany, Hostpath: /pv/log, Reclaim Policy: Retain
  PVC - name:  pv-claim-l, Storage request: 50Mi, Access Modes: ReadWritemany 
  Pod - name : my-nginx-pod, image Name: nginx, Volume: PersistentVolumeClaim: pv-claim-l, volume mount : /log



Secrets -----
 4  echo -n 'admin' | base64 > username.txt
    5  echo -n 'password123' | base64 > password.txt
    6  kubectl get secrets 
    8  cat username.txt
    0  cat password.txt
   11  kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt
   12  kubectl get secrets 
   13  kubectl describe secrets db-user-pass
   
   
   
 Config map
management.endpoints.enabled-by-default=true 
management.endpoint.info.enabled=true 
management.security.enabled=false 
management.endpoints.web.exposure.include=*







server.port= 9000
server.servlet.context-path=/oracle 
oracleprops.greeting= Thank you and visit again - altered 
oracleprops.greeting1= New Data




4  cat > application1.properties
    5  cat > application2.properties
    6  kubectl create configmap myconfig-map --from-literal=key1=value1 --from-literal=key2=value2
    7  kubectl create configmap myconfig-map1 --from-file=./application1.properties --from-file=./application2.properties
    8  kubectl get cm
